# Statement 6
# Compare DNN training using Adam and SGD optimizers (both with a learning rate of 0.001) on the Wildfire dataset


import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Flatten, Dense
from tensorflow.keras.optimizers import Adam, SGD

# Step 1: Define data paths
train_val_path = r"D:\SEM 6\Deep Learning\Datasets\forest_fire\Training and Validation"

# Step 2: Image preprocessing
img_height, img_width = 64, 64
batch_size = 32

train_datagen = ImageDataGenerator(rescale=1./255, validation_split=0.1)

train_generator = train_datagen.flow_from_directory(
    train_val_path,
    target_size=(img_height, img_width),
    batch_size=batch_size,
    class_mode='binary',
    subset='training',
    shuffle=True
)

val_generator = train_datagen.flow_from_directory(
    train_val_path,
    target_size=(img_height, img_width),
    batch_size=batch_size,
    class_mode='binary',
    subset='validation',
    shuffle=False
)

# Step 3: Define a function to build and train the model
def train_model(optimizer, label):
    model = Sequential([
        Flatten(input_shape=(img_height, img_width, 3)),
        Dense(128, activation='relu'),
        Dense(64, activation='relu'),
        Dense(1, activation='sigmoid')
    ])
    model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])
    history = model.fit(train_generator, epochs=10, validation_data=val_generator, verbose=1)
    return history, label

# Step 4: Train with Adam and SGD
history_adam, label_adam = train_model(Adam(learning_rate=0.001), "Adam")
history_sgd, label_sgd = train_model(SGD(learning_rate=0.001), "SGD")

# Step 5: Plot accuracy
plt.plot(history_adam.history['accuracy'], label='Train Acc (Adam)')
plt.plot(history_adam.history['val_accuracy'], label='Val Acc (Adam)')
plt.plot(history_sgd.history['accuracy'], label='Train Acc (SGD)')
plt.plot(history_sgd.history['val_accuracy'], label='Val Acc (SGD)')
plt.title('Training vs Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

# Step 6: Plot loss
plt.plot(history_adam.history['loss'], label='Train Loss (Adam)')
plt.plot(history_adam.history['val_loss'], label='Val Loss (Adam)')
plt.plot(history_sgd.history['loss'], label='Train Loss (SGD)')
plt.plot(history_sgd.history['val_loss'], label='Val Loss (SGD)')
plt.title('Training vs Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()