# Statement 5
# Train a DNN on the Forest Fire dataset using RMSprop optimizer with a learning rate of 0.01. Report training and validation accuracy


import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Flatten, Dense
from tensorflow.keras.optimizers import RMSprop

# ðŸ”¹ Step 1: Define data paths
train_val_path = r"D:\SEM 6\Deep Learning\Datasets\forest_fire\Training and Validation"
test_path = r"D:\SEM 6\Deep Learning\Datasets\forest_fire\Testing"

# ðŸ”¹ Step 2: Image preprocessing
img_height, img_width = 64, 64
batch_size = 32

train_datagen = ImageDataGenerator(rescale=1./255, validation_split=0.1)

train_generator = train_datagen.flow_from_directory(
    train_val_path,
    target_size=(img_height, img_width),
    batch_size=batch_size,
    class_mode='binary',
    subset='training',
    shuffle=True
)

val_generator = train_datagen.flow_from_directory(
    train_val_path,
    target_size=(img_height, img_width),
    batch_size=batch_size,
    class_mode='binary',
    subset='validation',
    shuffle=False
)

# ðŸ”¹ Step 3: Build DNN model
model = Sequential([
    Flatten(input_shape=(img_height, img_width, 3)),
    Dense(128, activation='relu'),
    Dense(64, activation='relu'),
    Dense(1, activation='sigmoid')
])

# ðŸ”¹ Step 4: Compile using RMSprop (LR = 0.01)
optimizer = RMSprop(learning_rate=0.01)
model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])

# ðŸ”¹ Step 5: Train the model
history = model.fit(train_generator, epochs=10, validation_data=val_generator, verbose=2)

# ðŸ”¹ Step 6: Plot training and validation accuracy
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Training vs Validation Accuracy (RMSprop)')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()