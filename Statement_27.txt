#Statement 27
#Build both CNN and DNN models for the CIFAR-10 dataset, compare their accuracy and loss


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, BatchNormalization, Activation
from tensorflow.keras.utils import to_categorical

# Load and preprocess data
def load_data(train_path, test_path):
    train_df = pd.read_csv(train_path)
    test_df = pd.read_csv(test_path)

    # Extract labels and features
    X_train = train_df.iloc[:, 1:].values.astype('float32') / 255.0
    y_train = train_df.iloc[:, 0].values

    X_test = test_df.iloc[:, 1:].values.astype('float32') / 255.0
    y_test = test_df.iloc[:, 0].values

    # Reshape
    X_train = X_train.reshape(-1, 32, 32, 3)
    X_test = X_test.reshape(-1, 32, 32, 3)

    # One-hot encode labels
    y_train = to_categorical(y_train, 10)
    y_test = to_categorical(y_test, 10)

    return (X_train, y_train), (X_test, y_test)

# DNN model
def build_dnn():
    model = Sequential([
        Flatten(input_shape=(32, 32, 3)),
        Dense(512), BatchNormalization(), Activation('relu'),
        Dense(256), BatchNormalization(), Activation('relu'),
        Dense(10, activation='softmax')
    ])
    return model

# CNN model
def build_cnn():
    model = Sequential([
        Conv2D(32, (3,3), activation='relu', padding='same', input_shape=(32, 32, 3)),
        MaxPooling2D(pool_size=(2,2)),
        Conv2D(64, (3,3), activation='relu', padding='same'),
        MaxPooling2D(pool_size=(2,2)),
        Flatten(),
        Dense(256, activation='relu'),
        Dense(10, activation='softmax')
    ])
    return model

# Train a model and return history
def train_model(model, X_train, y_train, X_test, y_test):
    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
    history = model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_test, y_test), verbose=2)
    return history

# Plot accuracy and loss
def plot_comparison(dnn_history, cnn_history):
    # Accuracy
    plt.figure(figsize=(12, 5))

    plt.subplot(1, 2, 1)
    plt.plot(dnn_history.history['val_accuracy'], label='DNN')
    plt.plot(cnn_history.history['val_accuracy'], label='CNN')
    plt.title('Validation Accuracy')
    plt.xlabel('Epoch')
    plt.ylabel('Accuracy')
    plt.legend()
    plt.grid(True)

    # Loss
    plt.subplot(1, 2, 2)
    plt.plot(dnn_history.history['val_loss'], label='DNN')
    plt.plot(cnn_history.history['val_loss'], label='CNN')
    plt.title('Validation Loss')
    plt.xlabel('Epoch')
    plt.ylabel('Loss')
    plt.legend()
    plt.grid(True)

    plt.tight_layout()
    plt.show()

# Main execution
(X_train, y_train), (X_test, y_test) = load_data('train.csv', 'test.csv')

dnn_model = build_dnn()
cnn_model = build_cnn()

dnn_history = train_model(dnn_model, X_train, y_train, X_test, y_test)
cnn_history = train_model(cnn_model, X_train, y_train, X_test, y_test)

plot_comparison(dnn_history, cnn_history)