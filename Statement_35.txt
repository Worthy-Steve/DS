# Statement 35
# Build a Deep Neural Network for Fashion MNIST Classification
# ● Load Fashion MNIST dataset
# ● Preprocess the data using standardization
# ● Define a feed-forward neural network with 3 Dense layers
# ● Use RMSprop optimizer and categorical crossentropy loss
# ● Train the model for 15 epochs and evaluate performance
# ● Plot the training and validation curves


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.utils import to_categorical

# Step 1: Load Fashion MNIST CSV files
train_df = pd.read_csv(r"D:\SEM 6\Deep Learning\Datasets\Fashion_MNIST\fashion-mnist_train.csv")
test_df = pd.read_csv(r"D:\SEM 6\Deep Learning\Datasets\Fashion_MNIST\fashion-mnist_test.csv")

# Step 2: Extract features and labels
x_train = train_df.iloc[:, 1:].values
y_train = train_df.iloc[:, 0].values

x_test = test_df.iloc[:, 1:].values
y_test = test_df.iloc[:, 0].values

# Step 3: Normalize (Standardize) the data
scaler = StandardScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.transform(x_test)

# Step 4: One-hot encode the labels
y_train_cat = to_categorical(y_train, 10)
y_test_cat = to_categorical(y_test, 10)

# Step 5: Build the DNN model
model = Sequential([
    Dense(128, activation='relu', input_shape=(784,)),
    Dense(64, activation='relu'),
    Dense(32, activation='relu'),
    Dense(10, activation='softmax')
])

# Step 6: Compile the model
model.compile(optimizer=RMSprop(), loss='categorical_crossentropy', metrics=['accuracy'])

# Step 7: Train the model
history = model.fit(x_train, y_train_cat, epochs=15, batch_size=32, validation_split=0.1, verbose=2)

# Step 8: Evaluate on test data
test_loss, test_acc = model.evaluate(x_test, y_test_cat, verbose=0)
print(f"\nTest Accuracy: {test_acc:.4f}")

# Step 9: Classification report
y_pred = np.argmax(model.predict(x_test), axis=1)
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Step 10: Plot accuracy curves
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Val Accuracy')
plt.title('Accuracy Over Epochs')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

# Step 11: Plot loss curves
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Val Loss')
plt.title('Loss Over Epochs')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()