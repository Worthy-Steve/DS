# Statement 11
# Use a batch size of 64 and learning rate of 0.001 to train a DNN on the UCI dataset. Document training accuracy and loss.

import pandas as pd
import numpy as np
import time
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam

# ðŸ”¹ Step 1: Load dataset from CSV
data = pd.read_csv("uci_digits.csv")  # Replace with actual file name

# ðŸ”¹ Step 2: Features and labels
X = data.iloc[:, :-1].values   # First 64 columns (features)
y = data.iloc[:, -1].values    # Last column (label)

# ðŸ”¹ Step 3: Normalize features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# ðŸ”¹ Step 4: Train-Test split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# ðŸ”¹ Step 5: Build the DNN model
model = Sequential()
model.add(Dense(128, input_dim=64, activation='relu'))
model.add(Dense(64, activation='relu'))
model.add(Dense(10, activation='softmax'))  # 10 classes (0â€“9)

# ðŸ”¹ Step 6: Compile the model
optimizer = Adam(learning_rate=0.001)
model.compile(optimizer=optimizer, loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# ðŸ”¹ Step 7: Train the model and capture training accuracy/loss
start_time = time.time()
history = model.fit(X_train, y_train, epochs=10, batch_size=64, validation_split=0.2, verbose=1)
end_time = time.time()

# ðŸ”¹ Step 8: Display training results
final_train_acc = history.history['accuracy'][-1]
final_train_loss = history.history['loss'][-1]

print(f"\nâœ… Training Time: {end_time - start_time:.2f} seconds")
print(f"âœ… Final Training Accuracy: {final_train_acc * 100:.2f}%")
print(f"âœ… Final Training Loss: {final_train_loss:.4f}")